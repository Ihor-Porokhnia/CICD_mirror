#!groovy
properties([[$class: 'JiraProjectProperty'], buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '2', numToKeepStr: '2')), disableConcurrentBuilds(), disableResume(), parameters([string(defaultValue: 'create', description: '', name: 'OPERATION', trim: true), string(defaultValue: '1', description: '', name: 'COUNT', trim: true)])])
node('Frontend') {
  stage('Checkout')  {
    git credentialsId: 'ssh-key-main', url: 'git@github.com:Ihor-Porokhnia/CICD.git'
  }
  stage('TerraPlay')  {    

    if (OPERATION == 'create') {
              sh 'terraform init ./terraforest/plan_02'
              sh 'terraform plan -var="instance_count=$COUNT" ./terraforest/plan_02'
              sh 'terraform apply -auto-approve -var="instance_count=$COUNT" ./terraforest/plan_02'
              build job: 'ansipipe', propagate: false, wait: false, parameters: [string(name: 'OPERATION', value: 'nodeinit')]   


    }
    else if (OPERATION == 'destroy') {
              sh 'terraform init ./terraforest/plan_02'
              sh 'terraform plan -var="instance_count=$COUNT" ./terraforest/plan_02'
              sh 'terraform destroy -auto-approve -var="instance_count=$COUNT" ./terraforest/plan_02'
              build job: 'ansipipe', propagate: false, wait: false, parameters: [string(name: 'OPERATION', value: 'nodeinit')]   
              
    }
    else if (OPERATION == 'test') {
           withCredentials([string(credentialsId: 'aws-key-id', variable: 'aws-key'), string(credentialsId: 'aws-secret-key', variable: 'aws-secret-k')]) {


              sh 'terraform init ./terraforest/plan_01'
              sh 'terraform plan  -var="aws_id=$aws-key" -var="aws-secret=$aws-secret-k" ./terraforest/plan_01'
              sh 'terraform apply  -var="aws_id=$aws-key" -var="aws-secret=$aws-secret-k" ./terraforest/plan_01'
           }    
              
    }
  }
}
